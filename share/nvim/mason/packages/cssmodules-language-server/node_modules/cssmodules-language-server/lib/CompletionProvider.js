"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSSModulesCompletionProvider = exports.COMPLETION_TRIGGERS = void 0;
const os_1 = require("os");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const lsp = __importStar(require("vscode-languageserver/node"));
const textDocuments_1 = require("./textDocuments");
const utils_1 = require("./utils");
exports.COMPLETION_TRIGGERS = ['.', '[', '"', "'"];
/**
 * check if current character or last character is any of the completion triggers (i.e. `.`, `[`) and return it
 *
 * @see COMPLETION_TRIGGERS
 */
function findTrigger(line, position) {
    const i = position.character - 1;
    for (const trigger of exports.COMPLETION_TRIGGERS) {
        if (line[i] === trigger) {
            return trigger;
        }
        if (i > 1 && line[i - 1] === trigger) {
            return trigger;
        }
    }
    return undefined;
}
/**
 * Given the line, position and trigger, returns the identifier referencing the styles spreadsheet and the (partial) field selected with options to help construct the completion item later.
 *
 */
function getWords(line, position, trigger) {
    const text = line.slice(0, position.character);
    const index = text.search(/[a-z0-9\._\[\]'"\-]*$/i);
    if (index === -1) {
        return undefined;
    }
    const words = text.slice(index);
    if (words === '' || words.indexOf(trigger) === -1) {
        return undefined;
    }
    switch (trigger) {
        // process `.` trigger
        case '.':
            return words.split('.');
        // process `[` trigger
        case '[': {
            const [obj, field] = words.split('[');
            let lineAhead = line.slice(position.character);
            const endsWithQuote = lineAhead.search(/^["']/) !== -1;
            lineAhead = endsWithQuote ? lineAhead.slice(1) : lineAhead;
            const wrappingBracket = lineAhead.search(/^\s*\]/) !== -1;
            const startsWithQuote = field.length > 0 && (field[0] === '"' || field[0] === "'");
            return [
                obj,
                field.slice(startsWithQuote ? 1 : 0),
                { wrappingBracket, startsWithQuote, endsWithQuote },
            ];
        }
        default: {
            throw new Error(`Unsupported trigger character ${trigger}`);
        }
    }
}
function createCompletionItem(trigger, name, position, fieldOptions) {
    const nameIncludesDashes = name.includes('-');
    const completionField = trigger === '[' || nameIncludesDashes ? `['${name}']` : name;
    let completionItem;
    // in case of items with dashes, we need to replace the `.` and suggest the field using the subscript expression `[`
    if (trigger === '.') {
        if (nameIncludesDashes) {
            const range = lsp.Range.create(lsp.Position.create(position.line, position.character - 1), // replace the `.` character
            position);
            completionItem = vscode_languageserver_protocol_1.CompletionItem.create(completionField);
            completionItem.textEdit = lsp.InsertReplaceEdit.create(completionField, range, range);
        }
        else {
            completionItem = vscode_languageserver_protocol_1.CompletionItem.create(completionField);
        }
    }
    else {
        // trigger === '['
        const startPositionCharacter = position.character -
            1 - // replace the `[` character
            ((fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.startsWithQuote) ? 1 : 0); // replace the starting quote if present
        const endPositionCharacter = position.character +
            ((fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.endsWithQuote) ? 1 : 0) + // replace the ending quote if present
            ((fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.wrappingBracket) ? 1 : 0); // replace the wrapping bracket if present
        const range = lsp.Range.create(lsp.Position.create(position.line, startPositionCharacter), lsp.Position.create(position.line, endPositionCharacter));
        completionItem = vscode_languageserver_protocol_1.CompletionItem.create(completionField);
        completionItem.textEdit = lsp.InsertReplaceEdit.create(completionField, range, range);
    }
    return completionItem;
}
class CSSModulesCompletionProvider {
    constructor(camelCaseConfig) {
        this.completion = (params) => __awaiter(this, void 0, void 0, function* () {
            const textdocument = textDocuments_1.textDocuments.get(params.textDocument.uri);
            if (textdocument === undefined) {
                return [];
            }
            return this.provideCompletionItems(textdocument, params.position);
        });
        this._classTransformer = (0, utils_1.getTransformer)(camelCaseConfig);
    }
    updateSettings(camelCaseConfig) {
        this._classTransformer = (0, utils_1.getTransformer)(camelCaseConfig);
    }
    provideCompletionItems(textdocument, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContent = textdocument.getText();
            const lines = fileContent.split(os_1.EOL);
            const currentLine = lines[position.line];
            if (typeof currentLine !== 'string')
                return null;
            const currentDir = (0, utils_1.getCurrentDirFromUri)(textdocument.uri);
            const trigger = findTrigger(currentLine, position);
            if (!trigger) {
                return [];
            }
            const foundFields = getWords(currentLine, position, trigger);
            if (!foundFields) {
                return [];
            }
            const [obj, field, fieldOptions] = foundFields;
            const importPath = (0, utils_1.findImportPath)(fileContent, obj, currentDir);
            if (importPath === '') {
                return [];
            }
            const classNames = yield (0, utils_1.getAllClassNames)(importPath, field, this._classTransformer).catch(() => []);
            const res = classNames.map(_class => {
                const name = this._classTransformer(_class);
                const completionItem = createCompletionItem(trigger, name, position, fieldOptions);
                return completionItem;
            });
            return res.map((x, i) => (Object.assign(Object.assign({}, x), { kind: lsp.CompletionItemKind.Text, data: i + 1 })));
        });
    }
}
exports.CSSModulesCompletionProvider = CSSModulesCompletionProvider;
